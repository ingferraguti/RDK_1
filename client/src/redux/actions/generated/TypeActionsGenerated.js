/**
 *
 *
  _____                      _              _ _ _     _   _     _        __ _ _
 |  __ \                    | |            | (_) |   | | | |   (_)      / _(_) |
 | |  | | ___    _ __   ___ | |_    ___  __| |_| |_  | |_| |__  _ ___  | |_ _| | ___
 | |  | |/ _ \  | '_ \ / _ \| __|  / _ \/ _` | | __| | __| '_ \| / __| |  _| | |/ _ \
 | |__| | (_) | | | | | (_) | |_  |  __/ (_| | | |_  | |_| | | | \__ \ | | | | |  __/
 |_____/ \___/  |_| |_|\___/ \__|  \___|\__,_|_|\__|  \__|_| |_|_|___/ |_| |_|_|\___|

 * DO NOT EDIT THIS FILE!!
 *
 *  TO CUSTOMIZE FUNCTIONS IN TypeActionsGenerated.js PLEASE EDIT ../TypeActions.js
 *
 *  -- THIS FILE WILL BE OVERWRITTEN ON THE NEXT SKAFFOLDER'S CODE GENERATION --
 *
 */

import * as types from "../../actionTypes";
import TypeApi from "../../../api/TypeApi";

let actionsFunction = {

  //CRUD METHODS

  // Create type
  createType: function(type) {
    return function(dispatch) {
      return TypeApi
        .createType(type)
        .then(type => {
          dispatch(actionsFunction.createTypeSuccess(type));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  createTypeSuccess: function(type) {
    return { type: types.CREATE_TYPE_SUCCESS, payload: type };
  },


  // Delete type
  deleteType: function(id) {
    return function(dispatch) {
      return TypeApi
        .deleteType(id)
        .then(type => {
          dispatch(actionsFunction.deleteTypeSuccess(type));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  deleteTypeSuccess: function(type) {
    return { type: types.DELETE_TYPE_SUCCESS, payload: type };
  },


  // Find by Name
  findByName: function(key) {
    return function(dispatch) {
      return TypeApi
        .findByName(key)
        .then(item => {
          dispatch(actionsFunction.findByNameSuccess(item));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  findByNameSuccess: function(item) {
    return { type: types.FINDBYNAME_TYPE_SUCCESS, payload: item };
  },


  // Get type
  loadType: function(id) {
    return function(dispatch) {
      return TypeApi
        .getOneType(id)
        .then(type => {
          dispatch(actionsFunction.loadTypeSuccess(type));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  loadTypeSuccess: function(type) {
    return { type: types.GET_TYPE_SUCCESS, payload: type };
  },

  // Load  list
  loadTypeList: function() {
    return function(dispatch) {
      return TypeApi
        .getTypeList()
        .then(list => {
          dispatch(actionsFunction.loadTypeListSuccess(list));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  loadTypeListSuccess: function(list) {
    return { type: types.LIST_TYPE_SUCCESS, payload: list };
  },

	
  // Save type
  saveType: function(type) {
    return function(dispatch) {
      return TypeApi
        .saveType(type)
        .then(type => {
          dispatch(actionsFunction.saveTypeSuccess(type));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  saveTypeSuccess: function(type) {
    return { type: types.UPDATE_TYPE_SUCCESS, payload: type };
  },


};

export default actionsFunction;
