/**
 *
 *
  _____                      _              _ _ _     _   _     _        __ _ _
 |  __ \                    | |            | (_) |   | | | |   (_)      / _(_) |
 | |  | | ___    _ __   ___ | |_    ___  __| |_| |_  | |_| |__  _ ___  | |_ _| | ___
 | |  | |/ _ \  | '_ \ / _ \| __|  / _ \/ _` | | __| | __| '_ \| / __| |  _| | |/ _ \
 | |__| | (_) | | | | | (_) | |_  |  __/ (_| | | |_  | |_| | | | \__ \ | | | | |  __/
 |_____/ \___/  |_| |_|\___/ \__|  \___|\__,_|_|\__|  \__|_| |_|_|___/ |_| |_|_|\___|

 * DO NOT EDIT THIS FILE!!
 *
 *  TO CUSTOMIZE FUNCTIONS IN BlockTypeActionsGenerated.js PLEASE EDIT ../BlockTypeActions.js
 *
 *  -- THIS FILE WILL BE OVERWRITTEN ON THE NEXT SKAFFOLDER'S CODE GENERATION --
 *
 */

import * as types from "../../actionTypes";
import BlockTypeApi from "../../../api/BlockTypeApi";

let actionsFunction = {

  //CRUD METHODS

  // Create blocktype
  createBlockType: function(blocktype) {
    return function(dispatch) {
      return BlockTypeApi
        .createBlockType(blocktype)
        .then(blocktype => {
          dispatch(actionsFunction.createBlockTypeSuccess(blocktype));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  createBlockTypeSuccess: function(blocktype) {
    return { type: types.CREATE_BLOCKTYPE_SUCCESS, payload: blocktype };
  },


  // Delete blocktype
  deleteBlockType: function(id) {
    return function(dispatch) {
      return BlockTypeApi
        .deleteBlockType(id)
        .then(blocktype => {
          dispatch(actionsFunction.deleteBlockTypeSuccess(blocktype));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  deleteBlockTypeSuccess: function(blocktype) {
    return { type: types.DELETE_BLOCKTYPE_SUCCESS, payload: blocktype };
  },


  // Find by Name
  findByName: function(key) {
    return function(dispatch) {
      return BlockTypeApi
        .findByName(key)
        .then(item => {
          dispatch(actionsFunction.findByNameSuccess(item));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  findByNameSuccess: function(item) {
    return { type: types.FINDBYNAME_BLOCKTYPE_SUCCESS, payload: item };
  },


  // Get blocktype
  loadBlockType: function(id) {
    return function(dispatch) {
      return BlockTypeApi
        .getOneBlockType(id)
        .then(blocktype => {
          dispatch(actionsFunction.loadBlockTypeSuccess(blocktype));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  loadBlockTypeSuccess: function(blocktype) {
    return { type: types.GET_BLOCKTYPE_SUCCESS, payload: blocktype };
  },

  // Load  list
  loadBlockTypeList: function() {
    return function(dispatch) {
      return BlockTypeApi
        .getBlockTypeList()
        .then(list => {
          dispatch(actionsFunction.loadBlockTypeListSuccess(list));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  loadBlockTypeListSuccess: function(list) {
    return { type: types.LIST_BLOCKTYPE_SUCCESS, payload: list };
  },

	
  // Save blocktype
  saveBlockType: function(blocktype) {
    return function(dispatch) {
      return BlockTypeApi
        .saveBlockType(blocktype)
        .then(blocktype => {
          dispatch(actionsFunction.saveBlockTypeSuccess(blocktype));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  saveBlockTypeSuccess: function(blocktype) {
    return { type: types.UPDATE_BLOCKTYPE_SUCCESS, payload: blocktype };
  },


};

export default actionsFunction;
