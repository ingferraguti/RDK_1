/**
 *
 *
  _____                      _              _ _ _     _   _     _        __ _ _
 |  __ \                    | |            | (_) |   | | | |   (_)      / _(_) |
 | |  | | ___    _ __   ___ | |_    ___  __| |_| |_  | |_| |__  _ ___  | |_ _| | ___
 | |  | |/ _ \  | '_ \ / _ \| __|  / _ \/ _` | | __| | __| '_ \| / __| |  _| | |/ _ \
 | |__| | (_) | | | | | (_) | |_  |  __/ (_| | | |_  | |_| | | | \__ \ | | | | |  __/
 |_____/ \___/  |_| |_|\___/ \__|  \___|\__,_|_|\__|  \__|_| |_|_|___/ |_| |_|_|\___|

 * DO NOT EDIT THIS FILE!!
 *
 *  TO CUSTOMIZE FUNCTIONS IN BlockActionsGenerated.js PLEASE EDIT ../BlockActions.js
 *
 *  -- THIS FILE WILL BE OVERWRITTEN ON THE NEXT SKAFFOLDER'S CODE GENERATION --
 *
 */

import * as types from "../../actionTypes";
import BlockApi from "../../../api/BlockApi";

let actionsFunction = {

  //CRUD METHODS

  // Create block
  createBlock: function(block) {
    return function(dispatch) {
      return BlockApi
        .createBlock(block)
        .then(block => {
          dispatch(actionsFunction.createBlockSuccess(block));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  createBlockSuccess: function(block) {
    return { type: types.CREATE_BLOCK_SUCCESS, payload: block };
  },


  // Delete block
  deleteBlock: function(id) {
    return function(dispatch) {
      return BlockApi
        .deleteBlock(id)
        .then(block => {
          dispatch(actionsFunction.deleteBlockSuccess(block));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  deleteBlockSuccess: function(block) {
    return { type: types.DELETE_BLOCK_SUCCESS, payload: block };
  },


  // Get block
  loadBlock: function(id) {
    return function(dispatch) {
      return BlockApi
        .getOneBlock(id)
        .then(block => {
          dispatch(actionsFunction.loadBlockSuccess(block));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  loadBlockSuccess: function(block) {
    return { type: types.GET_BLOCK_SUCCESS, payload: block };
  },

  // Load  list
  loadBlockList: function() {
    return function(dispatch) {
      return BlockApi
        .getBlockList()
        .then(list => {
          dispatch(actionsFunction.loadBlockListSuccess(list));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  loadBlockListSuccess: function(list) {
    return { type: types.LIST_BLOCK_SUCCESS, payload: list };
  },

	
  // Save block
  saveBlock: function(block) {
    return function(dispatch) {
      return BlockApi
        .saveBlock(block)
        .then(block => {
          dispatch(actionsFunction.saveBlockSuccess(block));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  saveBlockSuccess: function(block) {
    return { type: types.UPDATE_BLOCK_SUCCESS, payload: block };
  },


};

export default actionsFunction;
